#include "CkEntityConstructionScript_K2Node.h"

#include "GraphEditorSettings.h"

#include "CkEcs/EntityConstructionScript/CkEntity_ConstructionScript.h"

#include <Kismet/GameplayStatics.h>
#include <Kismet2/BlueprintEditorUtils.h>

#define LOCTEXT_NAMESPACE "UCk_K2Node_EntityConstructionScript"

// --------------------------------------------------------------------------------------------------------------------

namespace ck_k2node_entity_construction_script
{
    static auto PinName_Handle = TEXT("InHandle");
    static auto PinName_OptionalParams = TEXT("InOptionalParams");
}

auto
    UCk_K2Node_EntityConstructionScript::
    CreatePinsFromConstructionScript()
    -> void
{
    if (ck::Is_NOT_Valid(_ConstructionScript))
    { return; }

    const auto& CreatePinFromProperty = [this](const FProperty* InProperty, const uint8* InContainer)
    {
        auto* Pin = CreatePin(EGPD_Input, NAME_None, InProperty->GetFName());

        if (ck::Is_NOT_Valid(Pin, ck::IsValid_Policy_NullptrOnly{}))
        { return; }

        Pin->PinFriendlyName = InProperty->GetDisplayNameText();
        const auto* K2Schema = GetDefault<UEdGraphSchema_K2>();

        K2Schema->ConvertPropertyToPinType(InProperty, Pin->PinType);

        if (K2Schema->PinDefaultValueIsEditable(*Pin))
        {
            auto DefaultValueAsString = FString{};
            const auto& DefaultValueSet = FBlueprintEditorUtils::PropertyValueToString(InProperty, InContainer, DefaultValueAsString, this);
            check(DefaultValueSet);

            K2Schema->SetPinAutogeneratedDefaultValue(Pin, DefaultValueAsString);
        }

        K2Schema->ConstructBasicPinTooltip(*Pin, InProperty->GetToolTipText(), Pin->PinToolTip);
    };

    const auto* ConstructionScriptCDO = _ConstructionScript->GetDefaultObject();

    for (TFieldIterator<FProperty> PropertyIt(_ConstructionScript, EFieldIteratorFlags::IncludeSuper); PropertyIt; ++PropertyIt)
    {
        auto* Property = *PropertyIt;

        const auto& IsDelegate = Property->IsA(FMulticastDelegateProperty::StaticClass());
        const auto& IsExposedToSpawn = UEdGraphSchema_K2::IsPropertyExposedOnSpawn(Property);
        const auto& IsSettableExternally = NOT Property->HasAnyPropertyFlags(CPF_DisableEditOnInstance);

        if (Property->HasAnyPropertyFlags(CPF_Parm) ||
            NOT FBlueprintEditorUtils::PropertyStillExists(Property) ||
            NOT Property->HasAllPropertyFlags(CPF_BlueprintVisible) ||
            NOT IsSettableExternally ||
            NOT IsExposedToSpawn ||
            IsDelegate ||
            ck::IsValid(FindPin(Property->GetFName()), ck::IsValid_Policy_NullptrOnly{}))
        { continue; }

        CreatePinFromProperty(Property, reinterpret_cast<const uint8*>(ConstructionScriptCDO));
    }
}

auto
    UCk_K2Node_EntityConstructionScript::
    IsNodePure() const
    -> bool
{
    return false;
}

auto
    UCk_K2Node_EntityConstructionScript::
    ReallocatePinsDuringReconstruction(
        TArray<UEdGraphPin*>& InOldPins)
    -> void
{
    AllocateDefaultPins();
    RestoreSplitPins(InOldPins);
}

auto
    UCk_K2Node_EntityConstructionScript::
    PostEditChangeProperty(
        FPropertyChangedEvent& PropertyChangedEvent)
    -> void
{
    const auto PropertyName = ck::IsValid(PropertyChangedEvent.Property, ck::IsValid_Policy_NullptrOnly{})
                                ? PropertyChangedEvent.Property->GetFName()
                                : NAME_None;

    if (PropertyName == GET_MEMBER_NAME_CHECKED(UCk_K2Node_EntityConstructionScript, _ConstructionScript))
    {
        ReconstructNode();
        GetGraph()->NotifyGraphChanged();
    }

    Super::PostEditChangeProperty(PropertyChangedEvent);
}

auto
    UCk_K2Node_EntityConstructionScript::
    ShouldShowNodeProperties() const
    -> bool
{
    return true;
}

auto
    UCk_K2Node_EntityConstructionScript::
    GetNodeTitle(
        ENodeTitleType::Type InTitleType) const
    -> FText
{
    if (ck::Is_NOT_Valid(_ConstructionScript))
    {
        return CK_UTILS_IO_GET_LOCTEXT
        (
            TEXT("UCk_K2Node_EntityConstructionScript"),
            TEXT("[Ck] Request Construct Sub-ConstructionScript (Instanced)\n(INVALID Construction Script)")
        );
    }

    return CK_UTILS_IO_GET_LOCTEXT
    (
        TEXT("UCk_K2Node_EntityConstructionScript"),
        *ck::Format_UE(TEXT("[Ck] Request Construct Sub-ConstructionScript (Instanced)\n({})"), _ConstructionScript->GetDisplayNameText())
    );
}

auto
    UCk_K2Node_EntityConstructionScript::
    GetIconAndTint(
        FLinearColor& OutColor) const
    -> FSlateIcon
{
    OutColor = GetDefault<UGraphEditorSettings>()->FunctionCallNodeTitleColor;
    return FSlateIcon(FAppStyle::GetAppStyleSetName(), TEXT("Kismet.AllClasses.FunctionIcon"));
}

auto
    UCk_K2Node_EntityConstructionScript::
    GetMenuCategory() const
    -> FText
{
    return CK_UTILS_IO_GET_LOCTEXT
    (
        TEXT("UCk_K2Node_EntityConstructionScript"),
        TEXT("Ck|ConstructionScript")
    );
}

auto
    UCk_K2Node_EntityConstructionScript::
    DoAllocate_DefaultPins()
    -> void
{
    using namespace ck_k2node_entity_construction_script;

    auto HandlePinParams = FCreatePinParams{};
    HandlePinParams.bIsReference = true;

    CreatePin
    (
        EGPD_Input,
        UEdGraphSchema_K2::PC_Struct,
        FCk_Handle::StaticStruct(),
        PinName_Handle,
        HandlePinParams
    );

    CreatePin
    (
        EGPD_Input,
        UEdGraphSchema_K2::PC_Struct,
        FInstancedStruct::StaticStruct(),
        PinName_OptionalParams
    );

    CreatePinsFromConstructionScript();
}

auto
    UCk_K2Node_EntityConstructionScript::
    IsCompatibleWithGraph(
        UEdGraph const* InGraph) const
    -> bool
{
    if (NOT Super::IsCompatibleWithGraph(InGraph))
    { return false; }

    const auto* Blueprint = FBlueprintEditorUtils::FindBlueprintForGraph(InGraph);
    check(Blueprint != nullptr);

    const auto& BlueprintParentClass = Blueprint->ParentClass;
    if (ck::Is_NOT_Valid(BlueprintParentClass))
    { return false; }

    return BlueprintParentClass->IsChildOf(UCk_Entity_ConstructionScript_PDA::StaticClass());
}

auto
    UCk_K2Node_EntityConstructionScript::
    DoExpandNode(
        FKismetCompilerContext& InCompilerContext,
        UEdGraph* InSourceGraph,
        ECk_ValidInvalid InNodeValidity)
    -> void
{
    if (ck::Is_NOT_Valid(_ConstructionScript))
    {
        InCompilerContext.MessageLog.Error(*LOCTEXT("Missing Construction Script", "Invalid Construction Script. @@").ToString(), this);
        return;
    }

    // Set up the 'SpawnObject' function node
    auto* SpawnObject_Node = InCompilerContext.SpawnIntermediateNode<UK2Node_CallFunction>(this, InSourceGraph);
    SpawnObject_Node->FunctionReference.SetExternalMember
    (
        GET_FUNCTION_NAME_CHECKED(UGameplayStatics, SpawnObject),
        UGameplayStatics::StaticClass()
    );
    SpawnObject_Node->AllocateDefaultPins();
    InCompilerContext.MessageLog.NotifyIntermediateObjectCreation(SpawnObject_Node, this);

    if (auto* ObjectClassPin = SpawnObject_Node->FindPin(TEXT("ObjectClass"));
        ck::IsValid(ObjectClassPin, ck::IsValid_Policy_NullptrOnly{}))
    {
        InCompilerContext.GetSchema()->TrySetDefaultValue(*ObjectClassPin, _ConstructionScript->GetClassPathName().ToString());
        UCk_Utils_EditorGraph_UE::Request_ForceRefreshNode(*SpawnObject_Node);
    }

    const auto& SpawnObjectResultPin  = UCk_Utils_EditorGraph_UE::Get_Pin_Result(*SpawnObject_Node);

    if (ck::IsValid(SpawnObjectResultPin))
    {
        (*SpawnObjectResultPin)->PinType.PinSubCategoryObject = _ConstructionScript->GetAuthoritativeClass();
    }

    // Link the 'N' SetByVar nodes that were spawned for each properties different from the CDO
    auto* LastThenFollowingSetByVarPin = FKismetCompilerUtilities::GenerateAssignmentNodes
    (
        InCompilerContext,
        InSourceGraph,
        SpawnObject_Node,
        this,
        *SpawnObjectResultPin,
        _ConstructionScript
    );

    // Set up 'Request_Construct_Instanced' function node
    auto* ConstructEntityCS_Instanced = InCompilerContext.SpawnIntermediateNode<UK2Node_CallFunction>(this, InSourceGraph);
    ConstructEntityCS_Instanced->FunctionReference.SetExternalMember
    (
        GET_FUNCTION_NAME_CHECKED(UCk_Entity_ConstructionScript_PDA, Request_Construct_Instanced),
        UCk_Entity_ConstructionScript_PDA::StaticClass()
    );
    ConstructEntityCS_Instanced->AllocateDefaultPins();
    InCompilerContext.MessageLog.NotifyIntermediateObjectCreation(ConstructEntityCS_Instanced, this);


    // Connect everything together
    if (UCk_Utils_EditorGraph_UE::Request_TryCreateConnection
    (
        InCompilerContext,
        {
            {
                LastThenFollowingSetByVarPin,
                UCk_Utils_EditorGraph_UE::Get_Pin_Exec(*ConstructEntityCS_Instanced),
            },
            {
                UCk_Utils_EditorGraph_UE::Get_Pin_Result(*SpawnObject_Node),
                UCk_Utils_EditorGraph_UE::Get_Pin(TEXT("InConstructionScript"), ECk_EditorGraph_PinDirection::Input, *ConstructEntityCS_Instanced)
            },

        }
    ) == ECk_SucceededFailed::Failed) { return; };

    if (UCk_Utils_EditorGraph_UE::Request_LinkPins
    (
        InCompilerContext,
        {
            {
                UCk_Utils_EditorGraph_UE::Get_Pin_Exec(*this),
                UCk_Utils_EditorGraph_UE::Get_Pin_Exec(*SpawnObject_Node)
            },
            {
                UCk_Utils_EditorGraph_UE::Get_Pin_Then(*this),
                UCk_Utils_EditorGraph_UE::Get_Pin_Then(*ConstructEntityCS_Instanced)
            },
            {
                UCk_Utils_EditorGraph_UE::Get_Pin(ck_k2node_entity_construction_script::PinName_Handle, ECk_EditorGraph_PinDirection::Input, *this),
                ConstructEntityCS_Instanced->FindPin(ck_k2node_entity_construction_script::PinName_Handle)
            },
            {
                UCk_Utils_EditorGraph_UE::Get_Pin(ck_k2node_entity_construction_script::PinName_OptionalParams, ECk_EditorGraph_PinDirection::Input, *this),
                ConstructEntityCS_Instanced->FindPin(ck_k2node_entity_construction_script::PinName_OptionalParams)
            },
        },
        ECk_EditorGraph_PinLinkType::Move
    ) == ECk_SucceededFailed::Failed) { return; }

    BreakAllNodeLinks();
}

auto
    UCk_K2Node_EntityConstructionScript::
    DoGet_Menu_NodeTitle() const
    -> FText
{
    return CK_UTILS_IO_GET_LOCTEXT
    (
        TEXT("UCk_K2Node_EntityConstructionScript"),
        TEXT("[Ck] Request Construct Sub-ConstructionScript (Instanced)")
    );
}

// --------------------------------------------------------------------------------------------------------------------

#undef LOCTEXT_NAMESPACE